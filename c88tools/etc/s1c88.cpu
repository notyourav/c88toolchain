/**************************************************************************
**
**	FILE        :  @(#)s1c88.cpu	1.2
**
**	VERSION     :  99/04/19
**
**	DESCRIPTION :  Generalized CPU description for S1C88.
**		       configured as:
**		       - 0-32k   internal rom memory
**		       - 32k-60k internal ram memory
**		       - 60k-64k io memory
**		       - 64k-512K  internal rom memory
**		       - 512KM-1M  internal ram memory
**		       (No external memory)
**
**	NOTE        :  The CPU itself is capable to address up to
**                     8 Mbyte code and 16 Mbyte data memory.
**                     We could have defined 16 Mbyte of memory in this
**                     file. But since it is also used as the default
**                     configuration for the simulator, it would slow
**                     down and allocate for too much memory for most
**                     applications. Therefore this 'generalized'
**                     description file only defines 1 Mbyte of memory.
**
**	COPYRIGHT   :  2000 SEIKO EPSON CORPORATION
**
**************************************************************************/

cpu {
////////////////////////////////////////////////////////////////////////
//
//	 A D R E S S I N G   M O D E S 
//
//

	/////////////////////////////////////////////////////////
	//
	// program memory short
	// - Section CODE SHORT (object format id-nbr Y3)
	// - 8 bits addressable
	// - 0-32k address range mapped to 0-32k address space
	//         (via addressing mode code)
	//          
	amode code_short {
		attribute Y3;
		mau 8;
		map src=0 size=32k dst=0 amode=code;
	}

	/////////////////////////////////////////////////////////
	//
	// program memory/ constant rom data
	// - Section CODE (object format id-nbr Y1)
	// - 8 bits addressable
	// - 0-8M address range mapped to 0-8M address space
	//        (via addressing mode data)
	//
	amode code {
		attribute Y1;
		mau 8;
		map src=0 size=8M dst=0 space=SMC88_space;
	}

	/////////////////////////////////////////////////////////
	//  data memory tiny
	// - Section DATA TINY (object format id-nbr Y5)
	// - 8 bits addressable
	// - 0-256 address range mapped to 256-512 address space
	//         (via addressing mode data_short)
	//          
	amode data_tiny {
		attribute Y5;
		mau 8;
		map src=0 size=0x100 align=0x100 amode=data_short;
	}

	/////////////////////////////////////////////////////////
	//
	// data memory short
	// - Section DATA SHORT (object format id-nbr Y4)
	// - 8 bits addressable
	// - 0-64k address range mapped to 0-64k address space 
	//	   (via adressing mode data)
	//
	amode data_short {
		attribute Y4;
		mau 8;
		map src=0 size=64k dst=0 amode=data;
	}

	/////////////////////////////////////////////////////////
	//
	// data memory 
	// - Section DATA (object format id-nbr Y2)
	// - 8 bits addressable
	// - 0-16M address range mapped to 0-16M address space
	//
	amode data {
		attribute Y2;
		mau 8;
		map src=0 size=16M dst=0 space=SMC88_space;
	}

///////////////////////////////////////////////////////////////////////
//
//	S P A C E 
//	
//
	
	/////////////////////////////////////////////////////////
	//
	// address space 
	// - 8 bits addressable
	// - 0-16M address range mapped to 0-16M bus
	//
	space SMC88_space {
		mau 8;
		map src=0 size=16M dst=0 bus=SMC88_bus label=total_range;
	}


////////////////////////////////////////////////////////////////////////
//
//	B U S
//      
//

	/////////////////////////////////////////////////////////
	//
	// bus 
	// - 8 bits addressable
	// - 0-16M address range mapped to 0-16M internal bus 
	//
	bus SMC88_bus {
		mau 8;
		map src=0 size=16M dst=0 bus=internal_bus;
	}

	bus internal_bus {
		mau 8;
		mem addr=0        chips=i_rom0;
		mem addr=0x8000   chips=i_ram0;
		mem addr=0xf000   chips=io_ram;
		mem addr=0xff00   chips=io_mem;
		mem addr=0x10000  chips=i_rom1;
		mem addr=0x80000  chips=i_ram1;
	}

////////////////////////////////////////////////////////////////////////
//
//	I N T E R N A L   C H I P S
//	
//

	/////////////////////////////////////////////////////////
	// internal rom 
	// read-only
	// 8 bits addressable
	// 8000(hex) size
	//
	chips	i_rom0	attr=r mau=8 size=0x8000;

	/////////////////////////////////////////////////////////
	// internal ram 
	// writable
	// 8 bits addressable
	// 7000(hex) size
	//
	chips	i_ram0	attr=w mau=8 size=0x7000;

	/////////////////////////////////////////////////////////
	// i/o ram
	// writable
	// 8 bits addressable
	// F00(hex) size
	//	
	chips	io_ram attr=w mau=8 size=0xF00;

	/////////////////////////////////////////////////////////
	// i/o memory
	// special (cannot allocate in this area)
	// 8 bits addressable
	// 100(hex) size
	//	
	chips	io_mem	attr=s mau=8 size=0x100;

	/////////////////////////////////////////////////////////
	// internal rom 
	// read-only
	// 8 bits addressable
	//  70000(hex) size	(512K - 64K)
	//
	chips	i_rom1	attr=r mau=8 size=0x70000;

	/////////////////////////////////////////////////////////
	// internal ram 
	// writable
	// 8 bits addressable
	// 80000(hex) size	(512K)
	//
	chips	i_ram1	attr=w mau=8 size=0x80000;

////////////////////////////////////////////////////////////////////////
//
//	D E B U G G E R   R E G I S T E R   D E F I N I T I O N S
//	
	/////////////////////////////////////////////////////////
	// currently, no derivatives have special names for
	// their sfr's. Therefore all processors currently use
	// the default register definition file.
	regsfr	reg88.dat
}
